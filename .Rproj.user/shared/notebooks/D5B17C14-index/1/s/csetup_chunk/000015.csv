"0","library(tidyverse)"
"0","library(tidycensus)"
"0","library(ggplot2)"
"0","library(cpaltemplates)"
"0","library(haven)"
"0","library(readxl)"
"0","library(purrr)"
"0","library(sf)"
"0","library(leaflet)"
"0","library(DT)"
"0",""
"0","census_api_key(""7b32db9a1faf6b92a567a778f7763e70285eba97"", install = TRUE, overwrite = TRUE)"
"2","Your original .Renviron will be backed up and stored in your R HOME directory if needed.
"
"2","Your API key has been stored in your .Renviron and can be accessed by Sys.getenv(""CENSUS_API_KEY""). 
To use now, restart R or run `readRenviron(""~/.Renviron"")`
"
"1","[1]"
"1"," ""7b32db9a1faf6b92a567a778f7763e70285eba97"""
"1","
"
"0","library(tigris) # To get county shapefiles"
"0",""
"0","zctas_national <- get_acs(geography = ""zcta"", variables = ""B01003_001"", geometry = TRUE) %>%"
"0","  st_as_sf()"
"2","Getting data from the 2017-2021 5-year ACS
"
"2","Downloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.
"
"0","dallas_county <- get_acs(geography = ""county"", variables = ""B01003_001"", state = ""TX"", county = ""Dallas"", geometry = TRUE) %>%"
"0","  st_as_sf()"
"2","Getting data from the 2017-2021 5-year ACS
"
"2","Downloading feature geometry from the Census website.  To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.
"
"2","Using FIPS code '48' for state 'TX'
"
"2","Using FIPS code '113' for 'Dallas County'
"
"0","dallas_county_acs <- get_acs(geography = ""county"", "
"0","                             variables = c(""B17001_001"", ""B17001_002E"", ""B19013_001E""), "
"0","                             year = 2021, "
"0","                             survey = ""acs5"","
"0","                             state = ""TX"","
"0","                             county = ""Dallas"") %>%"
"0","  select(-moe) %>%"
"0","  spread(key = variable, value = estimate) %>%"
"0","  mutate(povertyRate = B17001_002/B17001_001)"
"2","Getting data from the 2017-2021 5-year ACS
"
"2","Using FIPS code '48' for state 'TX'
"
"2","Using FIPS code '113' for 'Dallas County'
"
"0","zctas_dallas <- zctas_national[st_intersects(dallas_county, zctas_national, sparse = FALSE), ]"
"0",""
"0","# priorities <- read_excel(""D:/CPAL Dropbox/Analytics/04_Projects/RAPID/CPAL_Codebook.8.2.23_with_priorities.xlsx"") %>%"
"0","# drop_na(PRIORITY) %>%"
"0","# pull(1)"
"0","demographics <- c("
"0","  ""CPALID"","
"0","  ""Source"","
"0","  ""UserLanguage"","
"0","  ""age_yr"","
"0","  ""Annual2023Income"","
"0","  ""Income2023M2Y"","
"0","  ""Income2023W2Y"","
"0","  ""POVERTYLine2023"""
"0",")"
"0","# "
"0","# data1raw <- read_sav(""data/Q1 2023 Responses/RAPID-Dallas Initial Recruitment 1 Data.sav"") %>%"
"0","#   mutate(CPAL.DEMO.007.2 = as.character(CPAL.DEMO.007.2))"
"0","# data2raw <- read_sav(""data/Q2 2023 Responses/RAPID-DALLAS_MasterFile_For_CPAL.8.2.23 (1).sav"")"
"0","data2raw <- read_sav(""~/data/RAPID/RAPID-DALLAS_MasterFile_For_CPAL.12.14.23.sav"")"
"0","# data <- read_csv(""C:/users/taylo/CPAL Dropbox/Analytics/04_Projects/RAPID/example.csv"")"
"0","# "
"0","# cols <- Reduce(intersect, list(c(demographics, priorities),"
"0","#                                # colnames(data1raw),"
"0","#                                colnames(data2raw)))"
"0","data <- data2raw %>%"
"0","  # select(all_of(cols)) %>%"
"0","  select(-ends_with(""TEXT""))"
"0",""
"0",""
"0","response_maps <- list("
"0","  CPAL.DEMO.007.2 = c("
"0","    ""1"" = ""American Indian or Alaska Native"","
"0","    ""2"" = ""Asian"","
"0","    ""3"" = ""Black or African American"","
"0","    ""4"" = ""Native Hawaiian or Other Pacific Islander"","
"0","    ""5"" = ""White"","
"0","    ""6"" = ""Other"","
"0","    ""8"" = ""Middle Eastern or North African"","
"0","    ""9"" = ""Hispanic, Latine, or Latin origin"""
"0","  ),"
"0","  CPAL.DEMO.009 = c("
"0","    summarize = F,"
"0","    ""1"" = ""English"","
"0","    ""2"" = ""Arabic"","
"0","    ""3"" = ""Chinese"","
"0","    ""4"" = ""French"","
"0","    ""5"" = ""German"","
"0","    ""6"" = ""Italian"","
"0","    ""7"" = ""Japanese"","
"0","    ""8"" = ""Korean"","
"0","    ""9"" = ""Russian"","
"0","    ""10"" = ""Spanish"","
"0","    ""11"" = ""Vietnamese"","
"0","    ""12"" = ""Other"","
"0","    ""13"" = ""ASL/Sign Language"""
"0","  ),"
"0","  CPAL.DEMO.010 = c("
"0","    summarize = F,"
"0","    ""0"" = ""No"","
"0","    ""1"" = ""Yes"","
"0","    ""-98"" = ""Unsure"","
"0","    ""-97"" = ""Do not wish to disclose"","
"0","    ""-99"" = ""Not applicable"""
"0","  ),"
"0","  CPAL.DEMO.011 = c("
"0","    summarize = T,"
"0","    ""1"" = ""Two parents"","
"0","    ""2"" = ""One parent"","
"0","    ""3"" = ""Other children/siblings older than 6"","
"0","    ""4"" = ""Adult relatives"","
"0","    ""5"" = ""Adult non-relatives"","
"0","    ""6"" = ""Other"""
"0","  ),"
"0","  CPAL.DEMO.014 = c("
"0","    summarize = F,"
"0","    ""1"" = ""Less than high school"","
"0","    ""2"" = ""Some high school"","
"0","    ""3"" = ""High school diploma or equivalent"","
"0","    ""4"" = ""Some college"","
"0","    ""5"" = ""Associate degree"","
"0","    ""6"" = ""Bachelor's degree"","
"0","    ""7"" = ""Master's degree"","
"0","    ""8"" = ""Doctorate or professional"","
"0","    ""9"" = ""Other"","
"0","    ""10"" = ""Trade school"","
"0","    ""11"" = ""Technical certification"""
"0","  ),"
"0","  CPAL.DEMO.015 = c("
"0","    summarize = F,"
"0","    ""0"" = ""No"","
"0","    ""9"" = ""GED"","
"0","    ""10"" = ""Undergraduate or post-secondary"","
"0","    ""11"" = ""Graduate degree program"","
"0","    ""12"" = ""Non-degree credentialing program"","
"0","    ""13"" = ""Not listed"""
"0","  ),"
"0","  CPAL.FSTR.004.a = c("
"0","    summarize = T,"
"0","    """""
"0","    "
"0","  )"
"0",")     "
"0",""
"0","summarize_subparts <- function(df, prefix, maps=response_maps) {"
"0","  cols <- grep(paste0(""^"",prefix), names(df), value = TRUE)"
"0","  response_map <- maps[[prefix]]"
"0","  summarized <- df %>%"
"0","    gather(key = ""subpart"", value = ""response"", starts_with(prefix)) %>%"
"0","    mutate(subpart = str_extract(subpart, ""\\d+$""),"
"0","           mapped_value = ifelse(response == 1, response_map[subpart], NA_character_)) %>%"
"0","    group_by(CPALID) %>%"
"0","    summarize(!!prefix := list(mapped_value)) %>%"
"0","    mutate_at(2, ~map(., ~na.omit(.))) "
"0","  df <- df %>%"
"0","    left_join(summarized, by = ""CPALID"") %>%"
"0","    select(-all_of(cols))"
"0","  return(df)"
"0","}"
"0",""
"0","df <- data %>%"
"0","  summarize_subparts(""CPAL.DEMO.007.2"") %>% mutate(Education_Category = case_when("
"0","    CPAL.DEMO.014 %in% c(""Less than high school"", ""Some high school"") ~ ""No high school degree"","
"0","    CPAL.DEMO.014 %in% c(""High school diploma or equivalent"", ""Some college"") ~ ""High school degree"","
"0","    CPAL.DEMO.014 %in% c(""Associate degree"", ""Bachelor's degree"", ""Master's degree"", ""Doctorate or professional"", ""Trade school"", ""Technical certification"", ""Other"") ~ ""Post-secondary degree or certification"","
"0","  )) %>%"
"0","  mutate(CPAL.DEMO.007.2 = case_when("
"0","    is.na(CPAL.DEMO.007.2) ~ NA,"
"0","    lengths(CPAL.DEMO.007.2) > 1 ~ ""Multiracial or other"","
"0","    CPAL.DEMO.007.2 == ""Other"" ~ ""Multiracial or other"","
"0","    TRUE ~ as.character(CPAL.DEMO.007.2)"
"0","  )) %>%"
"0","  # mutate(Annual2023Income = case_when("
"0","  #          Annual2023Income > 20 & Annual2023Income < 100 ~ Annual2023Income*1000,"
"0","  #          Annual2023Income == Income2023W2Y & Annual2023Income < 1000 ~ Annual2023Income*52,"
"0","  #          Annual2023Income == Income2023M2Y & Annual2023Income > 999 & Annual2023Income < 3000 ~ Annual2023Income*12,"
"0","  #          TRUE ~ Annual2023Income"
"0","  #        )) %>%"
"0","  filter(Annual2023Income < 10000000, Annual2023Income > 1000) %>%"
"0","  mutate(IncomeQuartile = case_when("
"0","    is.na(Annual2023Income) ~ NA,"
"0","    TRUE ~ cut("
"0","      Annual2023Income,"
"0","      breaks = c(-Inf, quantile(Annual2023Income, probs = c(0.25, 0.50, 0.75), na.rm = T), Inf),"
"0","      labels = c(1,2,3,4),"
"0","      include.lowest = T))) %>%"
"0","  mutate("
"0","      ChildUnder6 = ifelse(!is.na(CPAL.CBCL.015) & CPAL.CBCL.015 %in% 1:6, 1, 0)"
"0","  ) %>%  "
"0","  mutate(`Income Bracket` = factor(case_when("
"0","      Annual2023Income < 15000 ~ ""Less than $15,000"","
"0","      Annual2023Income >= 15000 & Annual2023Income < 24999 ~ ""$15,000 to $24,999"","
"0","      Annual2023Income >= 25000 & Annual2023Income < 34999 ~ ""$25,000 to $34,999"","
"0","      Annual2023Income >= 35000 & Annual2023Income < 49999 ~ ""$35,000 to $49,999"","
"0","      Annual2023Income >= 50000 & Annual2023Income < 74999 ~ ""$50,000 to $74,999"","
"0","      Annual2023Income >= 75000 & Annual2023Income < 99999 ~ ""$75,000 to $99,999"","
"0","      Annual2023Income >= 100000 & Annual2023Income < 149999 ~ ""$100,000 to $149,999"","
"0","      Annual2023Income >= 150000 ~ ""$150,000 and above"""
"0","    ),"
"0","    levels = c(""Less than $15,000"","
"0","               ""$15,000 to $24,999"","
"0","               ""$25,000 to $34,999"","
"0","               ""$35,000 to $49,999"","
"0","               ""$50,000 to $74,999"","
"0","               ""$75,000 to $99,999"","
"0","               ""$100,000 to $150,999"","
"0","               ""$150,000 and above"")"
"0","  )) %>%"
"0","  mutate(age_bucket = ifelse(""age_yr"" %in% colnames(data),"
"0","           cut(age_yr, breaks = c(0, 9, 19, 29, 39, 49, 59, 69, 79, Inf),"
"0","                     labels = c(""0-9"", ""10-19"", ""20-29"", ""30-39"", ""40-49"", ""50-59"", ""60-69"", ""70-79"", ""80+""))),"
"0","         NA) %>%"
"0","  mutate(`Over/Under 50k` = case_when("
"0","    Annual2023Income < 49999 ~ ""Less than $50,000"","
"0","    Annual2023Income >= 50000 ~ ""$50,000 and above"","
"0","    TRUE ~ NA"
"0","    ),"
"0","  )"
"2","Warning: attributes are not identical across measure variables;
they will be dropped"
"1","[1m[33mError[39m in `mutate()`:[22m
[38;5;250m[36mℹ[38;5;250m In argument: `age_bucket = ifelse(...)`.[39m
[1mCaused by error in `ifelse()`:[22m
[33m![39m argument ""no"" is missing, with no default
Backtrace:
[90m  1. [39m... %>% ...
[90m 10. [39m[1mbase[22m::ifelse(...)
"
